#
# Check for:
#
# - 1 manilaAPI
# - 2 manilaScheduler
# - 3 manilaShares
# - 4 extraMounts

apiVersion: manila.openstack.org/v1beta1
kind: Manila
metadata:
   name: manila
spec:
   customServiceConfig: |
      [DEFAULT]
      debug = true
   databaseInstance: openstack
   databaseUser: manila
   debug:
      dbInitContainer: false
      dbSync: false
   manilaAPI:
      customServiceConfig: |
         [DEFAULT]
         enabled_share_protocols = cephfs
      debug:
         initContainer: false
         service: false
      replicas: 1
      resources: {}
   manilaScheduler:
      customServiceConfig: '# add your customization here'
      debug:
         initContainer: false
         service: false
      replicas: 1
      resources: {}
   manilaShares:
      share1:
         replicas: 1
         resources: {}
         customServiceConfig: |
            [DEFAULT]
            enabled_share_backends = cephfs
            [cephfs]
            driver_handles_share_servers=False
            share_backend_name=cephfs
            share_driver=manila.share.drivers.cephfs.driver.CephFSDriver
            cephfs_conf_path=/etc/ceph/ceph.conf
            cephfs_auth_id=openstack
            cephfs_cluster_name=ceph
            cephfs_protocol_helper_type=CEPHFS
         debug:
            initContainer: false
            service: false
   passwordSelectors:
      database: ManilaDatabasePassword
      service: ManilaPassword
   preserveJobs: false
   rabbitMqClusterName: rabbitmq
   secret: osp-secret
   serviceUser: manila
status:
   conditions:
      - message: Setup complete
        reason: Ready
        status: "True"
        type: Ready
      - message: DB create completed
        reason: Ready
        status: "True"
        type: DBReady
      - message: DBsync completed
        reason: Ready
        status: "True"
        type: DBSyncReady
      - message: Input data complete
        reason: Ready
        status: "True"
        type: InputReady
      - message: Setup complete
        reason: Ready
        status: "True"
        type: ManilaAPIReady
      - message: Setup complete
        reason: Ready
        status: "True"
        type: ManilaSchedulerReady
      - message: Deployment completed
        reason: Ready
        status: "True"
        type: ManilaShareReady
      - message: NetworkAttachments completed
        reason: Ready
        status: "True"
        type: NetworkAttachmentsReady
      - message: RabbitMqTransportURL successfully created
        reason: Ready
        status: "True"
        type: RabbitMqTransportURLReady
      - message: RoleBinding created
        reason: Ready
        status: "True"
        type: RoleBindingReady
      - message: Role created
        reason: Ready
        status: "True"
        type: RoleReady
      - message: ServiceAccount created
        reason: Ready
        status: "True"
        type: ServiceAccountReady
      - message: Service config create completed
        reason: Ready
        status: "True"
        type: ServiceConfigReady
   databaseHostname: openstack
   manilaAPIReadyCount: 1
   manilaSchedulerReadyCount: 1
   manilaSharesReadyCounts:
      share1: 1
   transportURLSecret: rabbitmq-transport-url-manila-manila-transport
---
# when using image digests the containerImage URLs are SHA's so we verify them with a script
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
commands:
  - script: |
      tupleTemplate='{{ range (index .spec.template.spec.containers 1).env }}{{ .name }}{{ "#" }}{{ .value}}{{"\n"}}{{ end }}'
      imageTuples=$(oc get -n openstack-operators deployment manila-operator-controller-manager -o go-template="$tupleTemplate")
      # format of imageTuple is: RELATED_IMAGE_MANILA_<service>#<image URL with SHA> separated by newlines
      for ITEM in $(echo $imageTuples); do
        # it is an image
        if echo $ITEM | grep 'RELATED_IMAGE' &> /dev/null; then
          NAME=$(echo $ITEM | sed -e 's|^RELATED_IMAGE_MANILA_\([^_]*\)_.*|\1|')
          IMG_FROM_ENV=$(echo $ITEM | sed -e 's|^.*#\(.*\)|\1|')
          template='{{.spec.containerImage}}'
          case $NAME in
            API)
              SERVICE_IMAGE=$(oc get -n $NAMESPACE manilaapi manila-api -o go-template="$template")
              ;;
            SHARE)
              SERVICE_IMAGE=$(oc get -n $NAMESPACE manilashares manila-share-share1 -o go-template="$template")
              ;;
            SCHEDULER)
              SERVICE_IMAGE=$(oc get -n $NAMESPACE manilascheduler manila-scheduler -o go-template="$template")
              ;;
          esac
          if [ "$SERVICE_IMAGE" != "$IMG_FROM_ENV" ]; then
            echo "$NAME image does not equal $VALUE"
            exit 1
          fi
        fi
      done
      exit 0
